# Check if at least two arguments are provided
# $1: version string like v1.2.3
# $2: commit message in quotes
if [[ $# -lt 2 ]]; then
  echo "Usage: $0 vx.x.x \"Your commit message\""
  exit 1
fi

# Extract arguments
NEW_VERSION_RAW=$1                   # Full version with "v" prefix (e.g., v1.2.3)
NEW_VERSION=${NEW_VERSION_RAW#v}     # Remove the "v" prefix to get just the numeric version (e.g., 1.2.3)
COMMIT_MSG=$2                        # The commit message passed by user

# List of files to update
FILES=("app.json" "package.json")

# Loop through each file and update the version string
for FILE in "${FILES[@]}"; do
  if [[ -f "$FILE" ]]; then
    # Use sed to find and replace the version line
    # The regex matches lines like: "version": "x.x.x"
    # It replaces it with: "version": "NEW_VERSION"
    sed -i -E "s/\"version\": \"[0-9]+\.[0-9]+\.[0-9]+\"/\"version\": \"${NEW_VERSION}\"/" "$FILE"
    echo "Updated $FILE to version $NEW_VERSION"
  else
    echo "Warning: $FILE not found"
  fi
done

# Stage the modified files for commit
git add app.json package.json

# Create a git commit with message format: <version>: <message>
git commit -m "$NEW_VERSION_RAW: $COMMIT_MSG"

# Push the changes
git push
